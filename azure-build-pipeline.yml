trigger:
    branches:
      include:
      - '*'

stages:
- stage: Build
  displayName: Build stage
    jobs:
    - job:
        pool:
        vmImage: 'ubuntu-latest'

        steps:
        - task: UsePythonVersion@0
        inputs:
            versionSpec: '3.6'

        - script: python -m pip install --upgrade pip azure-devops
        displayName: 'Install tools'

        - task: PythonScript@0
        inputs:
            scriptSource: 'filePath'
            scriptPath: './IdentifyGitBuildCommitItems.py'
        env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)

        - task: PythonScript@0
        inputs:
            scriptSource: 'filePath'
            scriptPath: './FilterDeployableScripts.py'

        - task: CopyFiles@2
        inputs:
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
        inputs:
            pathtoPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: drop

stages:
- stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    jobs:
    - job:
        pool:
            vmImage: 'ubuntu-latest'

        steps:
        - task: UsePythonVersion@0
            displayName: 'Use Python 3.7.5'
            inputs:
            versionSpec: 3.7.5
                
        steps:
        displayName: 'DOWNLOAD_INSTALL_DBT'
        - bash: |
            pip freeze > requirements.txt
            echo '########## Python Version ###########'
            python -V
            echo '########## 1 Install the latest pip ###########'
            sudo pip install -U pip
            echo '######## 2  Install setup tools  #######'
            sudo apt-get install python-setuptools
            echo '######## 3 Remove CFFI ########'
            sudo apt-get remove python-cffi
            echo '######## 4 Upgrade CFFI  ########'
            sudo pip install --upgrade cffi
            echo '######## 6 Install Python Library  ########'
            sudo apt-get install git libpq-dev python-dev 
            echo '######## 7 install cryptography==2.8  ########'
            sudo pip install cryptography==2.8
            echo ''######## 8 install dbt  ########'
            sudo pip install dbt==0.14.4
            echo '######## 9 validate dbt installation ########'
            dbt --version
            cat requirements.txt

        steps:
        displayName: 'DBT_RUN'
        - bash: |
            export SNOWSQL_ACCOUNT=$(ENV_SNOWSQL_ACCOUNT)
            export SNOWSQL_USER=$(ENV_SNOWSQL_USER)
            export DBT_PASSWORD=$(ENV_DBT_PASSWORD)
            export SNOWSQL_ROLE=$(ENV_SNOWSQL_ROLE)
            export SNOWSQL_DATABASE=$(ENV_SNOWSQL_DATABASE)
            export SNOWSQL_WAREHOUSE=$(ENV_SNOWSQL_WAREHOUSE)
            export DBT_PROFILES_DIR=./
            chmod 750 ./deploy_persistent_models.sh
            ./deploy_persistent_models.sh
        workingDirectory: '$(System.DefaultWorkingDirectory)/_dbt_deployments/drop'
        